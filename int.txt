🧠 1. Uzman Sistem Nedir?

Uzman sistem, belirli bir konuda (örneğin: tıp, trafik, tarım, hukuk) insan uzmanların bilgi ve kurallarını kullanarak karar verebilen bir yapay zekâ türüdür.

Yani:

Uzman sistem = Bilgi tabanı (kurallar) + Çıkarım motoru (mantık yürüten beyin)

Bileşenleri:
Bileşen	Görevi
Bilgi tabanı (Knowledge Base)	Uzmanın kuralları ve bilgileridir. (örnek: “Eğer ışık kırmızıysa dur.”)
Çıkarım motoru (Inference Engine)	Bu kuralları çalıştıran, mantık yürüten kısımdır.
Kullanıcı arayüzü	Kullanıcıdan veri alır, sonucu gösterir.
Açıklama sistemi (isteğe bağlı)	“Neden bu kararı verdiğini” açıklar.
🚦 2. Kodda ne oluyor?

Kodun tamamını adım adım inceleyelim.

a. Gerekli modüller
from random import choice
from experta import *


random.choice: Python’un rastgele seçim yapan fonksiyonu.

experta: Uzman sistem kuralları yazmayı kolaylaştıran bir Python kütüphanesi.

b. Bilgi Tanımı (Fact)
class Isik(Fact):
    """Trafik isiklariyla ilgili genel bilgiler"""
    pass


Fact: experta’daki “bilgi” birimidir.
Yani sistemin bildiği bir durum veya veri parçası.

Bu örnekte, Isik adlı bilgi, bir trafik ışığının rengine sahip olabilir.
Örneğin:

Isik(renk="kirmizi")

c. Bilgiye Göre Kurallar (Rules)
class KarsidanKarsiyaGecme(KnowledgeEngine):


Bu sınıf, çıkarım motorudur — yani kuralların çalıştığı yer.

Kurallar:
@Rule(Isik(renk="yesil"))
def yesil(self):
    print("Işık yeşil: Güvenli bir şekilde karşıya geçebilirsin. 👣")


Bu, bir “Eğer – O zaman” (IF–THEN) kuralıdır.

Eğer sistemde bir Isik nesnesi varsa ve renk="yesil" ise → bu fonksiyon çalışır.

Aynısı diğer renkler için de var:

@Rule(Isik(renk="kirmizi"))
@Rule(Isik(renk="sari"))


Yani kural tabanı şöyle özetlenebilir:

Eğer (IF)	O zaman (THEN)
Işık yeşil	Karşıya geç
Işık kırmızı	Dur
Işık sarı	Dikkat et, hazırlan
d. Çalıştırma Kısmı
uzman = KarsidanKarsiyaGecme()
uzman.reset()


uzman adlı bir bilgi motoru oluşturuluyor.

.reset() → önceki bilgiler temizleniyor.

e. Bilgi Ekleme (Fact Declaration)
uzman.declare(Isik(renk=choice(["yesil", "kirmizi", "sari"])))


Burada:

choice(["yesil", "kirmizi", "sari"]) → listedeki üç renkten rastgele birini seçiyor.

Örneğin Python o anda "kirmizi" seçerse:

Isik(renk="kirmizi")


fact olarak sisteme ekleniyor.

Bu sayede sistem her çalıştırıldığında farklı bir trafik ışığı rengi seçiliyor.

f. Kural Çalıştırma
uzman.run()


Çıkarım motoru başlatılır.

Tüm kurallar tek tek incelenir.

Hangisi uygun (eşleşen Fact varsa) → o kuralın fonksiyonu çalışır.

Yani:

Eğer fact Isik(renk="kirmizi") → kirmizi() fonksiyonu çalışır.

Eğer Isik(renk="yesil") → yesil() fonksiyonu çalışır.

vb.

🎲 3. “Işık rengi neye göre rastgele geliyor?”

Bu satır yüzünden:

choice(["yesil", "kirmizi", "sari"])


Python’un random modülündeki choice() fonksiyonu listedeki elemanlardan birini her çalıştırmada rastgele seçer.
Yani bazen "yesil", bazen "kirmizi", bazen "sari" gelir.

O yüzden her program çalıştırıldığında çıktı farklı olur.
Örneğin:

Işık kırmızı: Dur! Karşıya geçmek tehlikeli. 🚫


ya da

Işık yeşil: Güvenli bir şekilde karşıya geçebilirsin. 👣

🧩 4. Özetle Bu Program Ne Yapıyor?
Aşama	İşlem
1️⃣	Trafik ışığı renklerinden birini rastgele seçiyor.
2️⃣	Bu bilgiyi sisteme bir Fact olarak veriyor.
3️⃣	Bilgi motoru (KnowledgeEngine) o renge uygun kuralı çalıştırıyor.
4️⃣	Kullanıcıya uygun mesajı gösteriyor.
🚀 5. Ekstra Bilgi: Bu sistem nasıl genişletilir?

Sen bu sisteme yeni kurallar ekleyebilirsin.
Örneğin hava durumu, trafik yoğunluğu gibi başka faktörleri de ekleyebilirsin:

@Rule(Isik(renk="yesil"), Fact(hava="yagmurlu"))
def yagmurlu_gecis(self):
    print("Işık yeşil ama zemin kaygan, dikkatli geç! 🌧️")


Yani uzman sistem mantığı şudur:

“Eğer şu durumlar varsa, o zaman şu sonucu üret.”